/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        //下面是一种天才解法：
        //相当于先找到最大的，放在栈的最顶端，然后依次向下找第二大的，返回，第三大的，返回。。。依次返回
        if(l1 == null){
            return l2;
        }
        else if(l2 == null){
            return l1;
        }
        else if(l1.val < l2.val){
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else{
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
        
        
        
        //还有一种方法，就是keep三个指针！（两个用来index前一个node，一个用来index前一个node，因为前一个node指向谁不一定）（注意！第三个指针是在index前一个node！！！而不是在新建一个list！）
        //return 的是 第一个被选召的list的第一个node！
        
    }
    
   
}
